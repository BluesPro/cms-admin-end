/**
 * This class is generated by jOOQ
 */
package diamond.cms.server.model.jooq.tables;


import diamond.cms.server.model.jooq.Cms;
import diamond.cms.server.model.jooq.Keys;
import diamond.cms.server.model.jooq.tables.records.CArticleRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CArticle extends TableImpl<CArticleRecord> {

    private static final long serialVersionUID = -214734260;

    /**
     * The reference instance of <code>cms.c_article</code>
     */
    public static final CArticle C_ARTICLE = new CArticle();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CArticleRecord> getRecordType() {
        return CArticleRecord.class;
    }

    /**
     * The column <code>cms.c_article.id</code>.
     */
    public final TableField<CArticleRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR.length(40).nullable(false), this, "");

    /**
     * The column <code>cms.c_article.title</code>.
     */
    public final TableField<CArticleRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>cms.c_article.content</code>.
     */
    public final TableField<CArticleRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cms.c_article.summary</code>. 文章摘要
     */
    public final TableField<CArticleRecord, String> SUMMARY = createField("summary", org.jooq.impl.SQLDataType.VARCHAR.length(300), this, "文章摘要");

    /**
     * The column <code>cms.c_article.status</code>. 0: 删除状态
1: 草稿状态
2: 发布状态
     */
    public final TableField<CArticleRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGER)), this, "0: 删除状态\n1: 草稿状态\n2: 发布状态");

    /**
     * The column <code>cms.c_article.create_time</code>.
     */
    public final TableField<CArticleRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>cms.c_article.update_time</code>.
     */
    public final TableField<CArticleRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>cms.c_article.catalog_id</code>.
     */
    public final TableField<CArticleRecord, String> CATALOG_ID = createField("catalog_id", org.jooq.impl.SQLDataType.VARCHAR.length(40), this, "");

    /**
     * The column <code>cms.c_article.banner</code>.
     */
    public final TableField<CArticleRecord, String> BANNER = createField("banner", org.jooq.impl.SQLDataType.VARCHAR.length(150), this, "");

    /**
     * The column <code>cms.c_article.tag_names</code>.
     */
    public final TableField<CArticleRecord, String> TAG_NAMES = createField("tag_names", org.jooq.impl.SQLDataType.VARCHAR.length(300), this, "");

    /**
     * Create a <code>cms.c_article</code> table reference
     */
    public CArticle() {
        this("c_article", null);
    }

    /**
     * Create an aliased <code>cms.c_article</code> table reference
     */
    public CArticle(String alias) {
        this(alias, C_ARTICLE);
    }

    private CArticle(String alias, Table<CArticleRecord> aliased) {
        this(alias, aliased, null);
    }

    private CArticle(String alias, Table<CArticleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Cms.CMS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CArticleRecord> getPrimaryKey() {
        return Keys.KEY_C_ARTICLE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CArticleRecord>> getKeys() {
        return Arrays.<UniqueKey<CArticleRecord>>asList(Keys.KEY_C_ARTICLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CArticle as(String alias) {
        return new CArticle(alias, this);
    }

    /**
     * Rename this table
     */
    public CArticle rename(String name) {
        return new CArticle(name, null);
    }
}
