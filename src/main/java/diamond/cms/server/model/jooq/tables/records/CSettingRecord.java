/**
 * This class is generated by jOOQ
 */
package diamond.cms.server.model.jooq.tables.records;


import diamond.cms.server.model.jooq.tables.CSetting;
import diamond.cms.server.model.jooq.tables.interfaces.ICSetting;

import javax.annotation.Generated;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CSettingRecord extends UpdatableRecordImpl<CSettingRecord> implements Record5<String, String, String, Integer, String>, ICSetting {

    private static final long serialVersionUID = 1812227038;

    /**
     * Setter for <code>cms.c_setting.id</code>.
     */
    @Override
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>cms.c_setting.id</code>.
     */
    @NotNull
    @Size(max = 120)
    @Override
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>cms.c_setting.name</code>. 参数key
     */
    @Override
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>cms.c_setting.name</code>. 参数key
     */
    @NotNull
    @Size(max = 45)
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>cms.c_setting.value</code>.
     */
    @Override
    public void setValue(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>cms.c_setting.value</code>.
     */
    @NotNull
    @Size(max = 65535)
    @Override
    public String getValue() {
        return (String) get(2);
    }

    /**
     * Setter for <code>cms.c_setting.type</code>. 1: 普通文本
     */
    @Override
    public void setType(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>cms.c_setting.type</code>. 1: 普通文本
     */
    @Override
    public Integer getType() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>cms.c_setting.description</code>. 备注
     */
    @Override
    public void setDescription(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>cms.c_setting.description</code>. 备注
     */
    @Size(max = 140)
    @Override
    public String getDescription() {
        return (String) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row5<String, String, String, Integer, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row5<String, String, String, Integer, String> valuesRow() {
        return (Row5) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return CSetting.C_SETTING.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return CSetting.C_SETTING.NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return CSetting.C_SETTING.VALUE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field4() {
        return CSetting.C_SETTING.TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return CSetting.C_SETTING.DESCRIPTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getValue();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value4() {
        return getType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getDescription();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CSettingRecord value1(String value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CSettingRecord value2(String value) {
        setName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CSettingRecord value3(String value) {
        setValue(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CSettingRecord value4(Integer value) {
        setType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CSettingRecord value5(String value) {
        setDescription(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CSettingRecord values(String value1, String value2, String value3, Integer value4, String value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public void from(ICSetting from) {
        setId(from.getId());
        setName(from.getName());
        setValue(from.getValue());
        setType(from.getType());
        setDescription(from.getDescription());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <E extends ICSetting> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CSettingRecord
     */
    public CSettingRecord() {
        super(CSetting.C_SETTING);
    }

    /**
     * Create a detached, initialised CSettingRecord
     */
    public CSettingRecord(String id, String name, String value, Integer type, String description) {
        super(CSetting.C_SETTING);

        set(0, id);
        set(1, name);
        set(2, value);
        set(3, type);
        set(4, description);
    }
}
